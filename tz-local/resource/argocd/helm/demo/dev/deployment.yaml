apiVersion: v1
kind: ServiceAccount
metadata:
  name: devops-prod-svcaccount
  labels:
    app: devops-tz-demo-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devops-tz-demo-app
spec:
  selector:
    matchLabels:
      app: devops-tz-demo-app
  replicas: 2
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/log-level: "debug"
        vault.hashicorp.com/role: "devops-prod"
        vault.hashicorp.com/agent-inject-secret-config: "secret/devops-prod/tz-demo-app"
        vault.hashicorp.com/agent-inject-secret-foo: "secret/devops-prod/dbinfo"
        vault.hashicorp.com/agent-inject-template-config: |
          {{ with secret "secret/devops-prod/tz-demo-app" -}}
             OPENAI_API_KEY: "{{ .Data.data.OPENAI_API_KEY }}"
          {{- end }}
          {{ with secret "secret/devops-prod/dbinfo" -}}
             db_id: "{{ .Data.data.name }}"
             db_password: "{{ .Data.data.passwod }}"
          {{- end }}
      labels:
        org: tz
        team: devops
        project: demo
        environment: prod
        app: devops-tz-demo-app
    spec:
      serviceAccountName: devops-prod-svcaccount
      containers:
        - name: devops-tz-demo-app
          image: xxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com/devops-tz-demo-app:v0.0.1
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /
              port: 8080
          envFrom:
            - configMapRef:
                name: devops-tz-demo-app-configmap
#            - secretRef:
#                name: devops-tz-demo-app-secret
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: devops-tz-demo-app-configmap
data:
  GIT_BRANCH: argo-vault
  DB_HOSTNAME: host.docker.internal
  DB_R_HOSTNAME: host.docker.internal
---
apiVersion: v1
kind: Service
metadata:
  name: devops-tz-demo-app-sv
spec:
  type: NodePort
  selector:
    app: devops-tz-demo-app
  ports:
    - port: 80
      name: api-80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: devops-tz-demo-app-ing
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "selfsigned-issuer"
spec:
  rules:
    - host: main.devops.topzone-k8s.topzone.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: devops-tz-demo-app-sv
                port:
                  number: 80
  tls:
    - hosts:
        - main.devops.topzone-k8s.topzone.com
      secretName: devops-tz-demo-app-ssl
